rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isVerified() {
      return isAuthenticated() && request.auth.token.email_verified == true;
    }
    
    function hasRole(role) {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == role;
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if true; // Public profiles
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) || 
        (isAuthenticated() && request.auth.uid == resource.data.userId);
      allow delete: if false; // Never allow deletion
    }
    
    // Jobs collection
    match /jobs/{jobId} {
      allow read: if true; // Public job listings
      allow create: if isAuthenticated() && 
        request.resource.data.clientId == request.auth.uid;
      allow update: if isAuthenticated() && 
        (resource.data.clientId == request.auth.uid || 
         request.auth.uid in resource.data.assignedTo);
      allow delete: if isAuthenticated() && 
        resource.data.clientId == request.auth.uid;
    }
    
    // Proposals collection
    match /proposals/{proposalId} {
      allow read: if isAuthenticated() && 
        (resource.data.freelancerId == request.auth.uid || 
         resource.data.clientId == request.auth.uid);
      allow create: if isAuthenticated() && 
        request.resource.data.freelancerId == request.auth.uid;
      allow update: if isAuthenticated() && 
        (resource.data.freelancerId == request.auth.uid || 
         resource.data.clientId == request.auth.uid);
      allow delete: if false;
    }
    
    // Conversations collection
    match /conversations/{conversationId} {
      allow read: if isAuthenticated() && 
        request.auth.uid in resource.data.participants;
      allow create: if isAuthenticated() && 
        request.auth.uid in request.resource.data.participants;
      allow update: if isAuthenticated() && 
        request.auth.uid in resource.data.participants;
      allow delete: if false;
      
      // Messages subcollection
      match /messages/{messageId} {
        allow read: if isAuthenticated() && 
          request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
        allow create: if isAuthenticated() && 
          request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants &&
          request.resource.data.senderId == request.auth.uid;
        allow update: if false;
        allow delete: if false;
      }
    }
    
    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }
    
    // Projects collection
    match /projects/{projectId} {
      allow read: if true; // Public project portfolios
      allow create: if isAuthenticated() && 
        request.resource.data.freelancerId == request.auth.uid;
      allow update: if isAuthenticated() && 
        resource.data.freelancerId == request.auth.uid;
      allow delete: if isAuthenticated() && 
        resource.data.freelancerId == request.auth.uid;
    }
    
    // Messages collection (top-level)
    match /messages/{messageId} {
      allow read: if isAuthenticated() && 
        (resource.data.senderId == request.auth.uid || 
         resource.data.recipientId == request.auth.uid);
      allow create: if isAuthenticated() && 
        request.resource.data.senderId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }
    
    // Reviews collection
    match /reviews/{reviewId} {
      allow read: if true;
      allow create: if isAuthenticated() && 
        request.resource.data.reviewerId == request.auth.uid;
      allow update: if isAuthenticated() && 
        resource.data.reviewerId == request.auth.uid;
      allow delete: if false;
    }
    
    // Verifications collection
    match /verifications/{verificationId} {
      allow read: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow delete: if false;
    }

    // Analytics collection (read-only for users)
    match /analytics/{document=**} {
      allow read: if isAuthenticated();
      allow write: if false; // Only functions can write
    }
    
    // Allow functions to write to any collection
    match /{document=**} {
      allow read, write: if request.auth != null && 
        request.auth.token.firebase != null &&
        request.auth.token.firebase.sign_in_provider == 'custom';
    }
  }
}