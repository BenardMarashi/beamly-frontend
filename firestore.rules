// firestore.rules

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function isVerifiedUser() {
      return isSignedIn() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isVerified == true;
    }
    
    function isNotBlocked() {
      return isSignedIn() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isBlocked != true;
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && isNotBlocked();
      allow delete: if false; // Users cannot delete their accounts directly
      
      // Saved jobs subcollection
      match /savedJobs/{jobId} {
        allow read, write: if isOwner(userId);
      }
    }
    
    // Jobs collection
    match /jobs/{jobId} {
      allow read: if isSignedIn() && 
        (resource.data.visibility == 'public' || 
         resource.data.clientId == request.auth.uid ||
         resource.data.hiredFreelancerId == request.auth.uid);
      allow create: if isSignedIn() && isNotBlocked() &&
        request.resource.data.clientId == request.auth.uid;
      allow update: if isSignedIn() && isNotBlocked() &&
        (resource.data.clientId == request.auth.uid ||
         (resource.data.hiredFreelancerId == request.auth.uid && 
          request.resource.data.keys().hasOnly(['status', 'updatedAt'])));
      allow delete: if resource.data.clientId == request.auth.uid &&
        resource.data.status == 'draft';
    }
    
    // Proposals collection
    match /proposals/{proposalId} {
      allow read: if isSignedIn() &&
        (resource.data.freelancerId == request.auth.uid ||
         exists(/databases/$(database)/documents/jobs/$(resource.data.jobId)) &&
         get(/databases/$(database)/documents/jobs/$(resource.data.jobId)).data.clientId == request.auth.uid);
      allow create: if isSignedIn() && isNotBlocked() &&
        request.resource.data.freelancerId == request.auth.uid &&
        exists(/databases/$(database)/documents/jobs/$(request.resource.data.jobId)) &&
        get(/databases/$(database)/documents/jobs/$(request.resource.data.jobId)).data.status == 'open';
      allow update: if isSignedIn() && isNotBlocked() &&
        ((resource.data.freelancerId == request.auth.uid && 
          request.resource.data.keys().hasOnly(['coverLetter', 'proposedRate', 'estimatedDuration', 'attachments', 'updatedAt', 'status']) &&
          request.resource.data.status in ['pending', 'withdrawn']) ||
         (exists(/databases/$(database)/documents/jobs/$(resource.data.jobId)) &&
          get(/databases/$(database)/documents/jobs/$(resource.data.jobId)).data.clientId == request.auth.uid &&
          request.resource.data.keys().hasOnly(['status', 'respondedAt', 'updatedAt']) &&
          request.resource.data.status in ['accepted', 'rejected']));
      allow delete: if false;
    }
    
    // Contracts collection
    match /contracts/{contractId} {
      allow read: if isSignedIn() &&
        (resource.data.clientId == request.auth.uid ||
         resource.data.freelancerId == request.auth.uid);
      allow create: if isSignedIn() && isNotBlocked() &&
        exists(/databases/$(database)/documents/jobs/$(request.resource.data.jobId)) &&
        get(/databases/$(database)/documents/jobs/$(request.resource.data.jobId)).data.clientId == request.auth.uid;
      allow update: if isSignedIn() && isNotBlocked() &&
        (resource.data.clientId == request.auth.uid ||
         resource.data.freelancerId == request.auth.uid);
      allow delete: if false;
    }
    
    // Messages collection
    match /messages/{messageId} {
      allow read: if isSignedIn() &&
        (resource.data.senderId == request.auth.uid ||
         resource.data.recipientId == request.auth.uid ||
         request.auth.uid in resource.data.conversationId.split('_'));
      allow create: if isSignedIn() && isNotBlocked() &&
        request.resource.data.senderId == request.auth.uid;
      allow update: if isSignedIn() &&
        resource.data.recipientId == request.auth.uid &&
        request.resource.data.keys().hasOnly(['status', 'readAt']);
      allow delete: if false;
    }
    
    // Conversations collection
    match /conversations/{conversationId} {
      allow read: if isSignedIn() &&
        request.auth.uid in resource.data.participants;
      allow create: if isSignedIn() && isNotBlocked() &&
        request.auth.uid in request.resource.data.participants &&
        request.resource.data.participants.size() == 2;
      allow update: if isSignedIn() &&
        request.auth.uid in resource.data.participants;
      allow delete: if false;
    }
    
    // Reviews collection
    match /reviews/{reviewId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && isNotBlocked() &&
        exists(/databases/$(database)/documents/contracts/$(request.resource.data.contractId)) &&
        (get(/databases/$(database)/documents/contracts/$(request.resource.data.contractId)).data.clientId == request.auth.uid ||
         get(/databases/$(database)/documents/contracts/$(request.resource.data.contractId)).data.freelancerId == request.auth.uid) &&
        get(/databases/$(database)/documents/contracts/$(request.resource.data.contractId)).data.status == 'completed';
      allow update: if false;
      allow delete: if false;
    }
    
    // Transactions collection
    match /transactions/{transactionId} {
      allow read: if isSignedIn() &&
        (resource.data.userId == request.auth.uid ||
         (resource.data.type in ['milestone-payment', 'hourly-payment'] &&
          exists(/databases/$(database)/documents/contracts/$(resource.data.contractId)) &&
          get(/databases/$(database)/documents/contracts/$(resource.data.contractId)).data.freelancerId == request.auth.uid));
      allow create: if false; // Only server can create transactions
      allow update: if false; // Only server can update transactions
      allow delete: if false;
    }
    
    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if isSignedIn() &&
        resource.data.userId == request.auth.uid;
      allow create: if false; // Only server can create notifications
      allow update: if isSignedIn() &&
        resource.data.userId == request.auth.uid &&
        request.resource.data.keys().hasOnly(['read', 'readAt']);
      allow delete: if false;
    }
    
    // Categories collection (read-only)
    match /categories/{categoryId} {
      allow read: if true; // Public access
      allow write: if false; // Admin only
    }
    
    // Skills collection (read-only)
    match /skills/{skillId} {
      allow read: if true; // Public access
      allow write: if false; // Admin only
    }
    
    // Analytics collection (admin only)
    match /analytics/{docId} {
      allow read, write: if false; // Admin only through Cloud Functions
    }
  }
}