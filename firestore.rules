rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }
    
    function isFreelancer() {
      return isAuthenticated() && getUserData().userType in ['freelancer', 'both'];
    }
    
    function isClient() {
      return isAuthenticated() && getUserData().userType in ['client', 'both'];
    }
    
    function isBoth() {
      return isAuthenticated() && getUserData().userType == 'both';
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) || 
                      (isAuthenticated() && request.resource.data.keys().hasOnly(['lastActive']));
      allow delete: if false; // Users cannot be deleted
    }
    
    // Jobs collection
    match /jobs/{jobId} {
      allow read: if isAuthenticated();
      allow create: if isClient() && 
                      request.auth.uid == request.resource.data.clientId;
      allow update: if isAuthenticated() && 
                      resource.data.clientId == request.auth.uid;
      allow delete: if isAuthenticated() && 
                      resource.data.clientId == request.auth.uid;
    }
    
    // Proposals collection
    match /proposals/{proposalId} {
      allow read: if isAuthenticated() && 
                    (resource.data.freelancerId == request.auth.uid || 
                     resource.data.clientId == request.auth.uid);
      allow create: if isFreelancer() && 
                      request.auth.uid == request.resource.data.freelancerId;
      allow update: if isAuthenticated() && 
                      (resource.data.freelancerId == request.auth.uid || 
                       resource.data.clientId == request.auth.uid);
      allow delete: if isAuthenticated() && 
                      resource.data.freelancerId == request.auth.uid;
    }
    
    // Contracts collection
    match /contracts/{contractId} {
      allow read: if isAuthenticated() && 
                    (resource.data.freelancerId == request.auth.uid || 
                     resource.data.clientId == request.auth.uid);
      allow create: if isClient() && 
                      request.auth.uid == request.resource.data.clientId;
      allow update: if isAuthenticated() && 
                      (resource.data.freelancerId == request.auth.uid || 
                       resource.data.clientId == request.auth.uid);
      allow delete: if false; // Contracts cannot be deleted
    }
    
    // Messages collection
    match /messages/{messageId} {
      allow read: if isAuthenticated() && 
                    (resource.data.senderId == request.auth.uid || 
                     resource.data.recipientId == request.auth.uid);
      allow create: if isAuthenticated() && 
                      request.auth.uid == request.resource.data.senderId;
      allow update: if isAuthenticated() && 
                      resource.data.recipientId == request.auth.uid && 
                      request.resource.data.keys().hasOnly(['status', 'readAt']);
      allow delete: if false; // Messages cannot be deleted
    }
    
    // Conversations collection
    match /conversations/{conversationId} {
      allow read: if isAuthenticated() && 
                    request.auth.uid in resource.data.participants;
      allow create: if isAuthenticated() && 
                      request.auth.uid in request.resource.data.participants;
      allow update: if isAuthenticated() && 
                      request.auth.uid in resource.data.participants;
      allow delete: if false; // Conversations cannot be deleted
    }
    
    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && 
                    resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
                      resource.data.userId == request.auth.uid && 
                      request.resource.data.keys().hasOnly(['read', 'readAt']);
      allow delete: if isAuthenticated() && 
                      resource.data.userId == request.auth.uid;
    }
    
    // Reviews collection
    match /reviews/{reviewId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
                      request.auth.uid == request.resource.data.reviewerId;
      allow update: if false; // Reviews cannot be edited
      allow delete: if false; // Reviews cannot be deleted
    }
    
    // Transactions collection
    match /transactions/{transactionId} {
      allow read: if isAuthenticated() && 
                    (resource.data.fromUserId == request.auth.uid || 
                     resource.data.toUserId == request.auth.uid);
      allow create: if false; // Only Cloud Functions can create transactions
      allow update: if false; // Only Cloud Functions can update transactions
      allow delete: if false; // Transactions cannot be deleted
    }
    
    // Categories collection (public read)
    match /categories/{categoryId} {
      allow read: if true;
      allow write: if false; // Only admins via console
    }
    
    // Skills collection (public read)
    match /skills/{skillId} {
      allow read: if true;
      allow write: if false; // Only admins via console
    }
    
    // SavedJobs subcollection under users
    match /users/{userId}/savedJobs/{savedJobId} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId);
    }
    
    // Freelancer profiles subcollection (if using separate collection)
    match /freelancers/{freelancerId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(freelancerId) && isFreelancer();
      allow update: if isOwner(freelancerId) && isFreelancer();
      allow delete: if false;
    }
  }
}