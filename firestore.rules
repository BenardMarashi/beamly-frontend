rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if true; // Public profiles
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) || 
        // Allow any authenticated user to update rating fields only
        (isAuthenticated() && 
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['rating', 'reviewCount', 'ratingCount']));
      allow delete: if false;
    }
    
    // Jobs collection - SECURE PROPOSAL COUNT UPDATE
    match /jobs/{jobId} {
      allow read: if true;
      
      allow create: if isAuthenticated() && 
        request.resource.data.clientId == request.auth.uid;
      
      // SECURE UPDATE RULE: Owner can update anything, others can only update proposal count
      allow update: if isAuthenticated() && (
        // Case 1: Job owner can update any fields
        resource.data.clientId == request.auth.uid ||
        
        // Case 2: Any authenticated user can ONLY increment/decrement proposalCount
        (
          // Check that ONLY proposalCount and updatedAt are being changed
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['proposalCount', 'updatedAt']) &&
          
          // Ensure the change is exactly +1 or -1 (no arbitrary values)
          (
            // Increment by 1 (when creating a proposal)
            request.resource.data.proposalCount == resource.data.proposalCount + 1 ||
            // Decrement by 1 (when withdrawing a proposal)
            request.resource.data.proposalCount == resource.data.proposalCount - 1
          )
        )
      );
      
      allow delete: if isAuthenticated() && 
        resource.data.clientId == request.auth.uid;
    }
    
    // Proposals collection - UPDATED FOR BETTER PERMISSIONS
    match /proposals/{proposalId} {
      // Allow authenticated users to read proposals they're involved in
      allow read: if isAuthenticated() && 
        (resource.data.freelancerId == request.auth.uid || 
         resource.data.clientId == request.auth.uid);
      
      // Allow authenticated users to create proposals with proper validation
      allow create: if isAuthenticated() && 
        request.resource.data.freelancerId == request.auth.uid &&
        request.resource.data.status == 'pending' &&
        request.resource.data.jobId != null &&
        request.resource.data.clientId != null;
      
      // Allow updates by freelancer or client
      allow update: if isAuthenticated() && 
        (resource.data.freelancerId == request.auth.uid || 
         resource.data.clientId == request.auth.uid);
      
      // Allow deletion only by freelancer (for withdrawing proposals)
      allow delete: if isAuthenticated() && 
        resource.data.freelancerId == request.auth.uid;
    }
    
    // Conversations collection
    match /conversations/{conversationId} {
      // Allow authenticated users to read conversations they're part of
      allow read: if isAuthenticated() && 
        request.auth.uid in resource.data.participants;
      allow create: if isAuthenticated() && 
        request.auth.uid in request.resource.data.participants;
      allow update: if isAuthenticated() && 
        request.auth.uid in resource.data.participants;
      allow delete: if false;
    }
    
    // Messages collection (top-level)
    match /messages/{messageId} {
      // Allow reading messages if user is authenticated and part of conversation
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        request.resource.data.senderId == request.auth.uid;
      allow update: if isAuthenticated() && 
        (resource.data.recipientId == request.auth.uid ||
         resource.data.senderId == request.auth.uid);
      allow delete: if false;
    }
    
    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }
    
    // Projects collection
    match /projects/{projectId} {
      allow read: if true;
      allow create: if isAuthenticated() && 
        request.resource.data.freelancerId == request.auth.uid;
      allow update: if isAuthenticated() && 
        resource.data.freelancerId == request.auth.uid;
      allow delete: if isAuthenticated() && 
        resource.data.freelancerId == request.auth.uid;
    }
    
    // Reviews collection
    match /reviews/{reviewId} {
      allow read: if true;
      allow create: if isAuthenticated() && 
        request.resource.data.clientId == request.auth.uid &&
        request.resource.data.freelancerId != null &&
        request.resource.data.rating >= 1 &&
        request.resource.data.rating <= 5;
      allow update: if false;
      allow delete: if false;
    }
    
    // Verifications collection
    match /verifications/{verificationId} {
      allow read: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow delete: if false;
    }

    // Analytics events collection
    match /analytics_events/{eventId} {
      allow read: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }
    
    // Analytics collection
    match /analytics/{document=**} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if false;
      allow delete: if false;
    }
    
    // Contracts collection
    match /contracts/{contractId} {
      allow read: if isAuthenticated() && 
        (resource.data.clientId == request.auth.uid || 
         resource.data.freelancerId == request.auth.uid);
      allow create: if isAuthenticated() && 
        (request.resource.data.clientId == request.auth.uid || 
         request.resource.data.freelancerId == request.auth.uid);
      allow update: if isAuthenticated() && 
        (resource.data.clientId == request.auth.uid || 
         resource.data.freelancerId == request.auth.uid);
      allow delete: if false;
    }
    
    // Payments collection
    match /payments/{paymentId} {
      allow read: if isAuthenticated() && 
        (resource.data.senderId == request.auth.uid || 
         resource.data.recipientId == request.auth.uid);
      allow create: if isAuthenticated() && 
        request.resource.data.senderId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }
  }
}